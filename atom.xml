<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>爱健身，爱代码</title>
  
  <subtitle>健身改变自我，代码改变世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-25T15:14:44.452Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>健身码农</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>手撕一个生产者消费者模型</title>
    <link href="http://yoursite.com/2019/05/08/%E6%89%8B%E6%92%95%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2019/05/08/手撕生产者消费者模型/</id>
    <published>2019-05-08T08:58:39.882Z</published>
    <updated>2019-07-25T15:14:44.452Z</updated>
    
    <content type="html"><![CDATA[<p>生产者-消费者模型在计算机各个领域经常用到的一个经典模型，那么如何实现一个简单的生产者-消费者模型呢？</p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先，需要一个地方存放生产者生产与消费者消费的资源，简单起见我们用一个Object数组当做资源池来保存资源。<br>其次，我们知道资源池是有大小限制的，那么生产者向资源池添加资源时就必须考虑资源池是否填满。同理，消费者消费资源时也必须考虑资源池里有没有资源可供消费，即资源池是否为空。<br>那么我们如何知道资源池是满还是空呢？当然是给资源池添加两个属性来表示资源池的状态：notFull表示非满状态，notEmpty表示非空状态。<br>最后，资源池是一个临界资源，不能同时被生产者消费者访问(存在多个生产者和消费者。若同时访问会造成资源数据错误)。我们需要一把锁来控制资源池的访问。这里采用ReentryLock来进行访问控制。<br>综上，采用带两个条件的ReentryLock来实现生产者消费者模型最合适不过了。下面就是实现代码。</p><h3 id="生产者-消费者模型"><a href="#生产者-消费者模型" class="headerlink" title="生产者-消费者模型"></a>生产者-消费者模型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class ProducerAndConsumerModel&lt;T&gt; &#123;</span><br><span class="line">private Object[] resources;</span><br><span class="line">// 添加下标，删除下标，数量</span><br><span class="line">private int addIndex, removeIndex, count;</span><br><span class="line">private Lock lock = new ReentryLock();</span><br><span class="line">private Condition notFull = lock.newCondition();</span><br><span class="line">private Condition notEmpty = lock.newCondition();</span><br><span class="line"></span><br><span class="line">public ProducerAndConsumerModel(int size)&#123;</span><br><span class="line">resources = new Object[size];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void addResource(T resource) throws InterruptedException&#123;</span><br><span class="line">lock.lock();</span><br><span class="line">try&#123;</span><br><span class="line">while(count==Object.length)&#123;</span><br><span class="line">notFull.await();</span><br><span class="line">&#125;</span><br><span class="line">resources[addIndex] = resource;</span><br><span class="line">if(++addIndex==Object.length)&#123;</span><br><span class="line">addIndex = 0;</span><br><span class="line">&#125;</span><br><span class="line">++count;</span><br><span class="line">notEmpty.signal();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//TODO remove()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生产者-消费者模型在计算机各个领域经常用到的一个经典模型，那么如何实现一个简单的生产者-消费者模型呢？&lt;/p&gt;&lt;h2 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; class=&quot;headerlink&quot; title=&quot;问题分析&quot;&gt;&lt;/a&gt;问题分析&lt;/h2&gt;&lt;p&gt;首先，需
      
    
    </summary>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[小白理财]]></title>
    <url>%2Funcategorized%2F%E5%B0%8F%E7%99%BD%E7%90%86%E8%B4%A2%2F</url>
    <content type="text"><![CDATA[穷爸爸，富爸爸读书笔记穷人为钱工作，富人让钱为其工作老鼠赛跑陷阱大多数人都希望有一份工资收入，之所以会这样是因为他们有恐惧和贪婪之心。没钱的恐惧会刺激我们努力工作，当我们得到工资报酬时，贪婪和欲望又开始让我们去想所有钱能买到的东西。于是就形成了一种起床-&gt;上班-&gt;付账-&gt;再起床-&gt;再上班-&gt;再付账的”老鼠赛跑”的模式。造成贫穷和财务问题的主要问题是恐惧和无知，而非经济环境、政府或富人。永远别忘记会有两种感情——恐惧和欲望会使你落入人生中最大的陷阱，如果你让他们来控制自己的思想，你的一生就会生活在恐惧中，从不探求你的梦想。资产是能把钱放进你口袋的东西，负债是把钱从你口袋里取出的东西。如果想变富，只需在一生中不断的买入资产；如果想变穷或成为中产阶级，只需不断地买入负债。富人买入资产；穷人只有支出；中产阶级买他们以为是资产的负债。为了财务安全，我们要不断关注自己的事业。事业围绕着的是资产，而不是收入。真正的资产可以分为以下几类：不需要本人到场就可以正常运作的业务。我拥有它们，但有别人经营和管理；股票；债券；共同基金；产生收入的房地产；票据（借据）；专利权；任何其他有价值、可产生收入或可能增值并且有很好的流通市场的东西。做个努力工作的员工，确保你的工作，但要不断构筑你的资产项。财商：会计，即财务知识；投资，钱生钱的科学；了解市场、供给与需求；法律规章。两种类型的投资者：第一种类型为普通投资者，即那些进行一揽子投资的人。好比直接买组装好的电脑的人；第二种为创造投资机会的投资者。好比买零件组装电脑的人。成为第二种投资者必须发展三种主要技能：寻找其他人都忽视的机会；不断增加资产；把精明的人组织起来。成功所必需的的管理素质包括：对现金流的管理；对系统（包括你本人、时间及家庭）的管理；对人员的管理。最重要的专门技能是销售和懂得市场营销。销售技能是个人成功的基本技能。而交际能力及谈判能力等对于一个人的成功更是至关重要。掌握销售和市场技能对大部分人来说是困难的，这主要是因为他们害怕被拒绝。所以，你在处理人际交往、商务谈判和控制被拒绝时的恐慌心理方面做得越好，生活就会越轻松。顾虑和愤世嫉俗的心态使大多数人生活的贫困但很安全。现实世界等着你去致富，可就是这些顾虑使人们摆脱不了顾虑。掌握了财务知识的人很多时候仍然不能拥有充裕的资产项目，主要原因有五个：恐惧心理；愤世嫉俗；懒惰；不良习惯；自负。十个步骤来开发自身的理财天赋：我需要一个超级现实的理由——精神的力量；每天做出自己的选择——选择的力量；慎重的选择朋友——关系的力量；掌握一种模式，然后再学习一种新的模式——快速学习的力量；首先支付自己——自律的力量；开创你自己事业所必备的最重要的三种管理技能：现金流量管理；人事管理；个人时间管理。不要背上数额过大的债务包袱，要使自己的支出保持低水平。首先增加自己的资产，然后，再用自己资产中产生的现金流购买大房子和好车子。当你资金短缺时，去承受外在压力而不要动用你的储蓄或投资，利用这种压力来激发 你的财务天赋，想出新办法挣到更多的钱，然后再支付账单。这样做不但能提高你的赚钱能力，还能提高你的财商。致富并不以牺牲舒适生活为代价的支付账单——这就是财商。给你的经纪人以优厚报酬——好建议的力量；做一个“印第安给予者”——无私的力量；资产用来购买奢侈品——集中的力量；对英雄的崇拜——神话的力量；先予后取——给予的力量。如何开始行动：停下手头的工作，不要做无效的事情，找一些有效的事情去做；寻找新的思想；找一个做过你想做的事情的人，请他和你一块共进午餐，向他请教一些诀窍和一些做生意的技巧；参加辅导班并购买相关资料；提出多份报价。]]></content>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[动态规划相关算法]]></title>
    <url>%2F%E7%AE%97%E6%B3%95%2F%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellman等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。求最长回文子串算法描述给定一个字符串 s，找到 s 中最长的回文子串。12输入: &quot;babad&quot;输出: &quot;bab&quot;算法分析求某个字符串的最长回文子串可分解为求该字符串子字符串的最长回文子串子问题，根据状态转移方程动态规划求得最终结果。实现代码123456789101112131415161718192021class Solution &#123; public String longestPalindromeSubstring(String s) &#123; if(s==null||s.length()&lt;2) return s; int len = s.length(); // dp[i][j] 表示s.substring(i,j+1)是否为回文字符串 boolean[][] dp = new boolean[len][len]; String longestSubstr = null; // 动态规划求所有长度子串是否为回文字符串 for(int i=len-1;i&gt;=0;i--)&#123; for(int j=i;j&lt;len;j++)&#123; // 若两端字符相等且s.substring(i+1,j)为回文字符串则s.substring(i,j+1)也为回文字符串 dp[i][j] = s.charAt(i)==s.charAt(j)&amp;&amp;(j-i&lt;3||dp[i+1][j-1]); // 若s.substring(i,j+1)为回文字符串且长度大于之前长度，最长回文字符串设为当前字符串 if(dp[i][j]&amp;&amp;(longestSubstr==null||j-i+1&gt;longestSubstr.length()))&#123; longestSubstr = s.substring(i,j+1); &#125; &#125; &#125; return longestSubstr; &#125;&#125;求最长回文子序列算法描述求某个字符串的最长回文子序列不要求结果字符连续，同样可分解为求该字符串子字符串的最长回文子序列子问题，根据状态转移方程动态规划求得最终结果。12输入: &quot;bbbab&quot;输出: 4算法分析实现代码123456789101112131415161718192021class Solution &#123; public int longestPalindromeSubseq(String s) &#123; if(s==null||s.length()&lt;1) return 0; int len = s.length(); int[][] dp = new int[len][len]; for(int i=len-1;i&gt;=0;i--)&#123; // 设置初始状态 dp[i][i] = 1; for(int j=i+1;j&lt;len;j++)&#123; // 若两端字符相等则在s.substring(i+1,j)的最长回文子序列长度基础上+2 if(s.charAt(i)==s.charAt(j))&#123; dp[i][j] = dp[i+1][j-1]+2; &#125;else&#123; // 否则，s.substring(i,j+1)的最长回文子序列长度为s.substring(i+1,j+1)与s.substring(i,j)的最长回文子序列长度较大值 dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]); &#125; &#125; &#125; return dp[0][len-1]; &#125;&#125;求最长回文子序列算法描述求某个字符串的最长回文子序列不要求结果字符连续，同样可分解为求该字符串子字符串的最长回文子序列子问题，根据状态转移方程动态规划求得最终结果。12输入: &quot;bbbab&quot;输出: 4算法分析实现代码123456789101112131415161718192021class Solution &#123; public int longestPalindromeSubseq(String s) &#123; if(s==null||s.length()&lt;1) return 0; int len = s.length(); int[][] dp = new int[len][len]; for(int i=len-1;i&gt;=0;i--)&#123; // 设置初始状态 dp[i][i] = 1; for(int j=i+1;j&lt;len;j++)&#123; // 若两端字符相等则在s.substring(i+1,j)的最长回文子序列长度基础上+2 if(s.charAt(i)==s.charAt(j))&#123; dp[i][j] = dp[i+1][j-1]+2; &#125;else&#123; // 否则，s.substring(i,j+1)的最长回文子序列长度为s.substring(i+1,j+1)与s.substring(i,j)的最长回文子序列长度较大值 dp[i][j] = Math.max(dp[i][j-1],dp[i+1][j]); &#125; &#125; &#125; return dp[0][len-1]; &#125;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一行一行源码分析清楚ThreadLocal]]></title>
    <url>%2Funcategorized%2F%E4%B8%80%E8%A1%8C%E4%B8%80%E8%A1%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E6%B8%85%E6%A5%9AThreadLocal%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[二叉树相关算法]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[前言树是计算机领域经常用到的一种数据结构，因为树的定义是递归的，因此，树相关的算法也大都涉及到递归求解。树有很多种类型，如二叉树、BST树、红黑树、B树、B+树等。二叉树结构比较简单，大部分算法都与二叉树相关。下面，我们针对二叉树的常见算法进行一一解析。后面的算法都要用到树节点的定义，因此我们对树节点进行统一定义如下：123456public class TreeNode &#123; int val; TreeNode left; TreeNode right; TreeNode(int x) &#123; val = x; &#125; &#125;先、中、后序遍历二叉树树的遍历一般都有两种解法——迭代与递归。递归解法简单明了但递归栈的使用易造成空间复杂度过高。迭代解法虽然代码多但不会消耗太多的空间。开发时推荐使用迭代算法，尽量避免采用递归算法。先序遍历迭代版：先序遍历树的顺序为root-&gt;left-&gt;right。迭代时先将根节点压栈，然后开始循环迭代，先访问出栈节点，然后再将右子节点压栈，再将左子节点压栈，然后再重复出栈访问，直至栈为空。代码如下：1234567891011121314151617public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if(root==null) return res; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.isEmpty())&#123; root = stack.pop(); res.add(root.val); if(root.right!=null)&#123; stack.push(root.right); &#125; if(root.left!=null)&#123; stack.push(root.left); &#125; &#125; return res;&#125;中序遍历迭代版：中序遍历树的顺序为left-&gt;root-&gt;right。直接开始循环迭代，先将根节点压栈，再将所有左节点压栈，然后出栈访问栈顶节点，然后再将栈顶节点右子节点压栈，然后再重复迭代直至栈为空。代码如下：123456789101112131415public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if(root==null) return res; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); while(root!=null||!stack.isEmpty())&#123; while(root!=null)&#123; stack.push(root); root = root.left; &#125; root = stack.pop(); res.add(root.val); root = root.right; &#125; return res;&#125;后序遍历迭代版1：后序遍历树的顺序为left-&gt;right-&gt;root。迭代时先将根节点压栈，然后开始循环迭代，先访问出栈节点，需要注意的是这里为了满足最终的后续遍历顺序，每次出栈后需要将访问节点放到最前面，即插入到上一个访问节点的前面。然后再将右子节点压栈，再将左子节点压栈，然后再重复出栈访问，直至栈为空。严格意义上将这种方式并没有真正的进行后序遍历，只是利用了技巧得到了后序遍历序列而已。代码如下：123456789101112131415161718public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if(root==null) return res; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); stack.push(root); while(!stack.isEmpty())&#123; root = stack.pop(); // 每次将访问的几点插入到最前面 res.add(0,root.val); if(root.left!=null)&#123; stack.push(root.left); &#125; if(root.right!=null)&#123; stack.push(root.right); &#125; &#125; return res;&#125;迭代版2：此版本真正实现了二叉树的后序遍历。遍历过程采用节点双压策略，即每次入栈节点两次。整体思路如下：入栈根节点两次；取当前栈顶节点作为当前节点，然后出栈 ；若栈不为空且取出的栈顶节点与当前栈顶节点相等，若当前节点左右子节点不为空分别入栈右子节点两次，否则访问当前节点，将当前节点加入结果列表；重复迭代，直至栈为空。代码如下：1234567891011121314151617181920212223242526272829public List&lt;Integer&gt; preorderTraversal(TreeNode root)&#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if(root==null) return res; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); // 入栈根节点两次 stack.push(root); stack.push(root); while(!stack.isEmpty())&#123; // 得到栈顶节点 TreeNode currNode = stack.peek(); // 出栈一次 stack.pop(); // 若当前节点与栈顶节点相等则继续压栈左右子节点 if(!stack.isEmpty()&amp;&amp;currNode == stack.peek())&#123; if(currNode.right!=null)&#123; stack.push(currNode.right); stack.push(currNode.right); &#125; if(currNode.left!=null)&#123; stack.push(currNode.left); stack.push(currNode.left); &#125; &#125;else&#123; // 若当前节点与栈顶节点不相等说明节点左右子节点均已遍历完毕 res.add(currNode.val); &#125; &#125; return res;&#125;序列化与反序列化一颗二叉树算法描述给定一棵二叉树，实现方法对其进行序列化与反序列化。序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。1234567给定二叉树： 1 / \ 2 3 / \ 4 5输出序列化结果：[1,2,3,null,null,4,5]。算法分析序列化时选择先序遍历顺序序列化二叉树，遇到空节点时设置特殊符号标识该位置为空节点。序列化过程中注意采用分隔符分隔各个节点。反序列化时借助双端队列进行。每次头结点出队列，按照先序序列完成树的反序列化。实现代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public class Codec &#123; // 自定义分隔符与空节点标识符 private final static String SPLITER = ","; private final static String NN = "X"; // 序列化二叉树 public String serialize(TreeNode root) &#123; StringBuilder sb = new StringBuilder(); serializeHelper(root,sb); return sb.toString(); &#125; private void serializeHelper(TreeNode root,StringBuilder sb)&#123; // 若当前节点为空，添加空标识与分隔符至序列化结尾 if(root==null)&#123; sb.append(NN+SPLITER); return; &#125; // 添加当前节点值与分隔符至末尾 sb.append(root.val+SPLITER); // 递归序列化左子树 serializeHelper(root.left,sb); // 递归序列化右子树 serializeHelper(root.right,sb); &#125; // 反序列化字符串为二叉树 public TreeNode deserialize(String data) &#123; String[] strs = data.split(SPLITER); Deque&lt;String&gt; deque = new LinkedList&lt;&gt;(); // 添加所有节点值至双端队列 deque.addAll(Arrays.asList(strs)); return deserializeHelper(deque); &#125; private TreeNode deserializeHelper(Deque&lt;String&gt; nodes)&#123; // 取双端队列头节点 String val = nodes.remove(); // 若当前头结点值为空节点标识，则返回空 if(val.equals(NN))&#123; return null; &#125; // 根据头节点值构造树节点 TreeNode root = new TreeNode(Integer.valueOf(val)); // 递归反序列化左子树序列 root.left = deserializeHelper(nodes); // 递归反序列化右子树序列 root.right = deserializeHelper(nodes); // 返回反序列化结果 return root; &#125;&#125;判断一棵树是否为平衡二叉树算法描述给定一颗树，判断其是否为平衡二叉树算法分析A平衡二叉树是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。从平衡二叉树描述可以知道平衡二叉树是递归定义的。因此，判断一颗二叉树是否是平衡二叉树也可以通过递归来判断。具体判断过程如下：判断根节点左右子树高度差是否大于1递归判断左右子树的左右子树高度差是否大于1实现代码12345678910111213class Solution &#123; public boolean isBlancedTree(TreeNode root) &#123; // 递归出口 if(root==null) return true; // 判断根节点所在树是否平衡及递归判断左右子树是否平衡 return Math.abs(height(root.left)-height(root.right))&lt;=1&amp;&amp;isBlancedTree(root.left)&amp;&amp;isBlancedTree(root.right); &#125; private int height(TreeNode node)&#123; if(node==null) return 0; return Math.max(height(node.left),height(node.right))+1; &#125;&#125;算法分析B上述实现方法采用从上至下依次判断方式，判断过程中存在大量重复计算，因此存在优化空间。如果改为从下往上遍历，如果子树是平衡二叉树，则返回子树的高度；如果发现子树不是平衡二叉树，则直接停止遍历，这样至多只对每个结点访问一次。代码如下。实现代码1234567891011121314151617181920class Solution &#123; public boolean isBlancedTree(TreeNode root) &#123; // 根据树高度计算函数返回结果判断是否平衡 return height(root)!=-1; &#125; private int height(TreeNode node)&#123; if(node==null) return 0; // 计算左子树高度 int leftHeight = height(node.left); // 若左子树高度返回-1说明左子树不平衡，直接返回-1 if(leftHeight==-1) return -1; // 计算右子树高度 int rightHeight = height(node.right); // 若右子树高度返回-1说明右子树不平衡，直接返回-1 if(rightHeight==-1) return -1; // 根据左右子树高度差判断左右子树是否平衡，若不平衡返回-1，若平衡返回子树高度 return Math.abs(leftHeight-rightHeight)&gt;1?-1:Math.max(leftHeight,rightHeight)+1; &#125;&#125;求二叉树的直径算法描述给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。1234567给定二叉树： 1 / \ 2 3 / \ 4 5返回3, 它的长度是路径[4,2,1,3]或者[5,2,1,3]。算法分析求一棵树两节点路径的最大值，创建一个全局变量保存最大直径。分别求出左右子树的最大深度，则经过根节点的直径值为左子树的最大深度加上右子树的最大深度，然后递归求解最终得到全局最大直径。实现代码123456789101112131415161718192021class Solution &#123; int maxDiameter = 0; public int diameterOfBinaryTree(TreeNode root) &#123; if(root==null) return 0; // 求树的最大深度 maxDepth(root); return maxDiameter; &#125; private int maxDepth(TreeNode node)&#123; if(node==null) return 0; // 递归求解左子树最大深度 int left = maxDepth(node.left); // 递归求解右子树最大深度 int right = maxDepth(node.right); // 求经过当前节点的直径，并保存当前最大直径 maxDiameter = Math.max(maxDiameter,left+right); // 返回最大深度 return Math.max(left,right)+1; &#125;&#125;二叉树中的最大路径和算法描述给定一个非空二叉树，返回其最大路径和。这里路径定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。12345输入 [1,2,3] 1 / \ 2 3输出：6算法分析此算法与求二叉树直径算法类似，求一棵树节点路径的最大和，创建一个全局变量保存最大路径和。分别求出左右子树的最大路径和，则经过根节点的直径值为左子树的最大路径和加上右子树的最大路径和再加上根节点的值，然后递归求解最终得到全局最大路径和。实现代码123456789101112131415161718192021class Solution &#123; int maxPathSum = Integer.MIN_VALUE; public int maxPathSum(TreeNode root) &#123; if(root==null) return 0; // 求树的最大路径和 maxPathSumHelper(root); return maxPathSum; &#125; private int maxPathSumHelper(TreeNode node)&#123; if(node==null) return 0; // 递归求解左子树最大路径和 int left = Math.max(maxPathSumHelper(node.left),0); // 递归求解右子树最大路径和 int right = Math.max(maxPathSumHelper(node.right),0); // 求经过当前节点的最大路径和，并保存当前最大的路径和 maxPathSum = Math.max(maxPathSum,left+right+node.val); // 返回最大路径和 return Math.max(left,right)+node.val; &#125;&#125;反转二叉树算法描述这个算法题的出现背后有一个很有意思的故事：Google: 90% of our engineers use the software you wrote (Homebrew), but you can’t invert a binary tree on a whiteboard so fuck off.大意是说某位大佬很厉害，谷歌公司90%的工程师都使用过他开发的软件，但这位大佬在面试时不能在白板上写出反转一颗二叉树的代码，所以谷歌就让他滚蛋了~12345678910111213用例示例：输入： 4 / \ 2 7 / \ / \1 3 6 9输出： 4 / \ 7 2 / \ / \9 6 3 1算法分析树的算法一般都会涉及到递归求解，反转二叉树也不例外。我们可以用递归和迭代两种方式分别求解。递归需要找到子问题，反转一颗二叉树的子问题就是反转左子树，反转右子树，然后继续递归，直至子树为空。迭代求解需要借助一个队列保存访问节点，然后取出节点进行左右子节点交换后再将左右子节点放入队列依次迭代。实现代码递归实现1234567891011121314class Solution &#123; public TreeNode invertTree(TreeNode root) &#123; // 递归出口 if(root==null) return null; // 递归反转左子树 TreeNode left = invertTree(root.left); // 递归反转右子树 TreeNode right = invertTree(root.right); // 交换根节点左右子树 root.left = right; root.right = left; return root; &#125;&#125;迭代实现12345678910111213141516171819class Solution &#123; public TreeNode invertTree(TreeNode root) &#123; if(root==null) return null; // 队列保存访问节点 Queue&lt;TreeNode&gt; queue = new LinkedList&lt;&gt;(); queue.offer(root); while(!queue.isEmpty())&#123; TreeNode node = queue.poll(); // 交换左右子节点 TreeNode temp = node.left; node.left = node.right; node.right = temp; // 继续入队，进行下一轮迭代 if(node.left!=null) queue.offer(node.left); if(node.right!=null) queue.offer(node.right); &#125; return root; &#125;&#125;二叉树的最近公共祖先算法描述给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。12345678910111213输入: 3 / \ 5 1 / \ / \6 2 0 8 / \ 7 4p=5, q=1输出: 3解释: 节点5和节点1的最近公共祖先是节点 3。算法分析分三种情况讨论。当根节点是p或q则根节点一定为最近公共祖先节点。当左子树节点包含p或q中一个节点，右子树节点也包含p或q中另一个节点，则根节点为最近公共祖先节点。左子树所有节点不包含p或q，则最近公共祖先节点存在于右子树中，反之存在于左子树中。对上述条件进行递归可求得最终最近公共祖先节点。实现代码123456789101112131415161718class Solution &#123; public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123; // 递归出口 if(root==null) return null; // 当根节点为p或q则最近公共祖先节点为根节点 if(root==p||root==q) return root; // 求左子树的最近公共祖先节点 TreeNode left = lowestCommonAncestor(root.left,p,q); // 求右子树的最近公共祖先节点 TreeNode right = lowestCommonAncestor(root.left,p,q); // 左右子树都不包含p和q的最近公共祖先节点则根节点为最近公共祖先节点 if(left!=null&amp;&amp;right!=null)&#123; return root; &#125;else&#123; // 返回左子树或右子树包含的最近公共祖先节点 return left==null?right:left; &#125; &#125;搜索二叉树转换为排序双向链表算法描述输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。123456输入: 2 / \ 1 3输出: 双链表 [1，2，3]算法分析采用递归实现树转链表，步骤如下：创建全局节点保存子树最右节点；递归转换左子树；拼接根节点至左子树末尾；递归转换右子树；拼接右子树至根节点后。根据左子树转换后的左链表是否为空返回左链表头结点或根节点。实现代码123456789101112131415161718192021222324252627282930class Solution &#123; // 创建全局节点保存左子树链表最后节点 TreeNode lastNode = null; public TreeNode convert(TreeNode root) &#123; // 递归结束条件 if(root==null) return null; // 递归访问到左子树叶子节点时说明可以开始转换链表，将最后节点值设为叶子节点并返回该叶子节点 if(root.left==null&amp;&amp;root.right==null)&#123; lastNode = root; return root; &#125; // 递归转换左子树 TreeNode leftHead = convert(root.left); // 拼接根节点至左链表末尾 if(leftHead!=null)&#123; lastNode.right = root; root.left = lastNode; &#125; // 更新末尾节点 lastNode = root; // 递归转换右子树 TreeNode rightHead = convert(root.right); // 拼接右子树至根节点后 if(rightHead!=null)&#123; rightHead.left = root; root.right = rightHead; &#125; // 返回最终结果 return leftHead==null?root:leftHead; &#125;根据二叉树的前序遍历序列与中序遍历序列构建二叉树算法描述给出一颗二叉树的前序遍历与中序遍历序列，重构出这颗二叉树。123456789preorder = [3,9,20,15,7]inorder = [9,3,15,20,7]返回二叉树: 3 / \9 20 / \ 15 7算法分析前序遍历的顺序是root-&gt;left-&gt;right，根据前序遍历可以确定根节点位置，但无法知道左子树与右子树的界限。而中序遍历的顺序left-&gt;root-&gt;right可根据根节点的位置确定左子树与右子树的界限。两者结合便可确定唯一的一颗二叉树。实现代码123456789101112131415161718192021222324252627282930313233343536373839class Solution &#123; public TreeNode buildTree(int[] preorder, int[] inorder) &#123; if(preorder==null||inorder==null) return null; return buildTree(preorder,inorder,0,0,inorder.length-1); &#125; // 采用递归的方式构建二叉树。递归构建二叉树过程中我们需要知道先序序列中当前根节点 // 的位置preIndex,中序遍历中当前子树所有节点的位置区间 private TreeNode buildTree(int[] preorder, int[] inorder, int preIndex,inStart,inEnd)&#123; // 递归出口。当根节点位置大于先序序列长度或中序序列起始位置大于结束位置时， // 说明当前节点左子树或右子树为空，结束递归。 if(preIndex&gt;preOrder.length-1||inStart&gt;InEnd)&#123; return null; &#125; // 按先序序列顺序创建根节点及子树根节点 TreeNode node = new TreeNode(preorder[preIndex]); // 保存根节点在中序序列中的位置 int currIndex=0; // 找到根节点在中序序列中的位置 for(int i=0;i&lt;inorder.length;i++)&#123; if(inorder[i]==preorder[preIndex])&#123; currIndex=i; &#125; &#125; // 递归创建左子树。根据先序遍历访问节点顺序root|left|right,可知左子树根节 // 点位于先序序列当前根节点位置右边第一个位置，即preIndex+1,整个左子树在中 // 序序列中的位置区间为当前中序序列起始位置到当前根节点在中序序列中的位置左边 // 第一个位置,即[inStart,currIndex-1]。 node.left = buildTree(preorder,inorder,preIndex+1,inStart,currIndex-1); // 递归创建右子树。根据先序遍历访问节点顺序root|left|right,可知右子树根节 // 点位于先序序列当前根节点位置加上左子树节点个数再加一，左子树节点个数又等于 // 中序序列中根节点的位置减去当前起始位置即currIndex-inStart,因此右子树根 // 节点位置为preIndex+currIndex-inStart+1,整个右子树在中序序列中的位置 // 区间为当前根节点在中序序列中的位置加一到当前中序序列结束位置即 // [currIndex+1,inEnd]。 node.right = buildTree(preorder,inorder,preIndex+currIndex-inStart+1,currIndex+1,inEnd); return node; &#125;&#125;根据二叉树的中序遍历序列与后序遍历序列构建二叉树算法描述给出一颗二叉树的中序遍历与后序遍历序列，重构出这颗二叉树。123456789inorder = [9,3,15,20,7]postorder = [9,15,7,20,3]返回二叉树: 3 / \9 20 / \ 15 7算法分析后序遍历的顺序是left-&gt;right-&gt;root，根据后序遍历可以确定根节点位置，但无法知道左子树与右子树的界限。而中序遍历的顺序left-&gt;root-&gt;right可根据根节点的位置确定左子树与右子树的界限。两者结合便可确定唯一的一颗二叉树。实现代码12345678910111213141516171819202122232425262728293031class Solution &#123; public TreeNode buildTree(int[] inorder, int[] postorder) &#123; if(inorder==null||postorder==null||inorder.length!=postorder) return null; // 采用hashmap存放inorder序列与对应下标，可直接定位根节点在中序序列中位置 Map&lt;Integer,Integer&gt; hm = new HashMap&lt;&gt;(); for(int i=0;i&lt;inorder.length;i++)&#123; hm.put(inorder[i],i); &#125; return buildTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1,hm); &#125; // 采用递归的方式构建二叉树。递归构建二叉树过程中我们需要知道后序序列中当前根节点 // 的位置pe,中序遍历中当前子树所有节点的位置区间 private TreeNode buildTree(int[] inorder,int is,int ie, int[] postorder, ps,pe)&#123; // 递归出口。当中序序列起始位置大于结束位置或后序遍历起始位置大于结束位置时， // 说明当前节点左子树或右子树为空，结束递归。 if(is&gt;ie||ps&gt;pe)&#123; return null; &#125; // 按先序序列顺序创建根节点及子树根节点 TreeNode node = new TreeNode(postorder[pe]); // 获取根节点在中序序列中的位置 int currIndex= hm.get(postorder[pe]); // 递归创建左子树。左子树在中序遍历序列中区间[is,currIndex-1]，在后序遍历序列区间[ps,ps+currIndex-is-1] node.left = buildTree(inorder,is,currIndex-1,postorder,ps,ps+currIndex-is-1,hm); // 递归创建右子树。右子树在中序遍历序列中区间[currIndex+1,ie]，在后序遍历序列区间[ps+currIndex-is,pe-1] node.right = buildTree(inorder,currIndex+1,ie,postorder,ps+currIndex-is,pe-1,hm); return node; &#125;&#125;根据二叉树的前序遍历序列与后序遍历序列构建二叉树算法描述给出一颗二叉树的前序遍历与中序遍历序列，重构出这颗二叉树。123456789pre = [1,2,4,5,3,6,7]post = [4,5,2,6,7,3,1]返回二叉树: 1 / \ 2 3 / \ / \ 4 5 6 7算法分析后序遍历的顺序是left-&gt;right-&gt;root，根据后序遍历可以确定根节点位置，但无法知道左子树与右子树的界限。而先序遍历的顺序root-&gt;left-&gt;right可根据根节点在后序序列中的位置确定左子树与右子树的界限。两者结合便可确定一颗二叉树(非唯一)。实现代码123456789101112131415161718192021222324252627282930313233343536class Solution &#123; public TreeNode buildTree(int[] preorder, int[] postorder) &#123; if(preorder==null||postorder==null||preorder.length!=postorder) return null; // 采用hashmap存放postorder序列与对应下标，可直接定位子树根节点在后序序列中位置 Map&lt;Integer,Integer&gt; hm = new HashMap&lt;&gt;(); for(int i=0;i&lt;postorder.length;i++)&#123; hm.put(postorder[i],i); &#125; return buildTree(preorder,0,preorder.length-1,postorder,0,postorder.length-1,hm); &#125; // 采用递归的方式构建二叉树。递归构建二叉树过程中我们需要知道后序序列中子树根节点所在位置 private TreeNode buildTree(int[] preorder,int preStart,int preEnd, int[] postorder, postStart,postEnd)&#123; // 递归出口 if(preStart&gt;preEnd||postStart&gt;postEnd)&#123; return null; &#125; // 只有一个节点 if(preStart==preEnd)&#123; return new TreeNode(preorder[preStart]); &#125; TreeNode node = new TreeNode(preorder[preStart]); // 左子树根节点在先序序列中位置 int subLeftRootIdx = preStart+1; // 左子树根节点在后序序列中位置 int subLeftRootPostIdx = hm.get(subLeftRootIdx) // 左子树在先序序列中区间结束位置 int subLeftEndPreIdx = subLeftRootIdx+subLeftRootPostIdx-postStart // 递归创建左子树。左子树在先序遍历序列中区间[preStart+1,subLeftEndPreIdx]，在后序遍历序列区间[ps,subLeftRootPostIdx] node.left = buildTree(preorder,preStart+1,subLeftEndPreIdx,postorder,ps,subLeftRootPostIdx,hm); // 递归创建右子树。右子树在中序遍历序列中区间[subLeftEndPreIdx+1,preEnd]，在后序遍历序列区间[subLeftRootPostIdx+1,pe-1] node.right = buildTree(preorder,subLeftEndPreIdx+1,preEnd,postorder,subLeftRootPostIdx+1,pe-1,hm); return node; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手撕单例模式]]></title>
    <url>%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F%E6%89%8B%E6%92%95%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单例模式是设计模式里面相对比较简单的一种模式，这里的简单是说单例模式的代码逻辑简单，但深究起来，它里面涉及到的知识还是很多的。单例模式有很多种实现方式，有线程不安全的单例模式，有加锁单例模式，有双重检查加锁单例模式，有基于volatile的双重检查加锁单例模式，有基于类初始化的单例模式。那么这么多种单例模式都有什么区别呢？下面，我们对这些单例模式进行一一分析。线程不安全的单例模式线程不安全的单例模式是单例模式最简单的实现方式，这种实现方式只推荐用来对单例模式进行理解，不推荐用于应用程序的开发中（单线程程序可以）。12345678910111213141516171819202122/** * 非线程安全的单例模式实现 */public class UnsafeSingleton &#123; // 单例实例 private static UnsafeSingleton singletonInstance; // 构造方法私有化，禁止外部创建单例类 private UnsafeSingleton()&#123; &#125; // 获取单例对象 public static UnsafeSingleton getSingletonInstance()&#123; // 如果单例对象还没有创建，则创建，否则直接返回已创建的单例对象 if(singletonInstance==null)&#123; // 多线程情况下这里会造成多个线程创建新对象，所以这种单例模式是线程不安全的 singletonInstance = new UnsafeSingleton(); &#125; return singletonInstance; &#125;&#125;加锁的单例模式这里加锁加是指在方法前加synchronized关键字，这种方式避免了多线程环境下对象的访问异常，缺点是每次获得实例均需加锁造成程序运行效率低下。12345678910111213141516171819public class SynchronizedSingleton &#123; // 单例实例 private static SynchronizedSingleton singletonInstance; // 构造方法私有化，禁止外部创建单例类 private SynchronizedSingleton()&#123; &#125; // 加锁获取单例对象,不论实例是否创建，访问时均要加锁，效率较低 public static synchronized SynchronizedSingleton getSingletonInstance()&#123; // 如果单例对象还没有创建，则创建，否则直接返回已创建的单例对象 if(singletonInstance==null)&#123; singletonInstance = new SynchronizedSingleton(); &#125; return singletonInstance; &#125;&#125;双重检查加锁的单例模式为了提高程序获取单例对象效率，将synchronized移至方法内部，只有当单例对象还未创建时才加锁创建对象，极大提升了访问效率。但这里存在线程安全问题，具体分析见代码注释123456789101112131415161718192021222324public class DCLSingleton &#123; // 单例实例 private static DCLSingleton singletonInstance; // 构造方法私有化，禁止外部创建单例类 private DCLSingleton()&#123; &#125; /*通过双重检查加锁方式获取单例实例，这里将synchronized移到了方法内部，只有在单 例对象还未创建的时候才会加锁，提高了对象获取效率，这里需要特别注意的一点就是单例对 象创建过程是线程不安全的，可能在新建对象还未初始化完毕，其他线程就可能访问到这个单 例对象，从而造成数据错误*/ public static DCLSingleton getSingletonInstance()&#123; // 如果单例对象还没有创建，则创建，否则直接返回已创建的单例对象 if(singletonInstance==null)&#123; synchronized (DCLSingleton.class)&#123; if(singletonInstance==null)&#123; singletonInstance = new DCLSingleton(); &#125; &#125; &#125; return singletonInstance; &#125;&#125;volatile+双重检查加锁的单例模式仅仅是双重检查加锁在多线程环境下会造成访问到不完整的对象，那么针对这个问题，要确保每次单例对象创建完成其他线程才能访问，则必须要禁止JVM的指令重排序，volatile关键字正好提供了这样的功能12345678910111213141516171819202122232425public class DCLAndVolatileSingleton &#123; // 单例实例,注意此处声明单例对象为volatile，这使得该对象具有内存可见性，以及禁止JVM对其进行指令重排序，从而保证该实例始终是预期的结果 private static volatile DCLAndVolatileSingleton singletonInstance; // 构造方法私有化，禁止外部创建单例类 private DCLAndVolatileSingleton()&#123; &#125; /* 通过双重检查加锁方式获取单例实例，这里将synchronized移到了方法内部，只有在单 例对象还未创建的时候才会加锁提高了对象获取效率，这里因为单例对象被声明为 volatile，所以不会出现对象逃逸，在多线程环境下，该对象始终都是初始化完成后的 */ public static DCLAndVolatileSingleton getSingletonInstance()&#123; // 如果单例对象还没有创建，则创建，否则直接返回已创建的单例对象 if(singletonInstance==null)&#123; synchronized (DCLAndVolatileSingleton.class)&#123; if(singletonInstance==null)&#123; singletonInstance = new DCLAndVolatileSingleton(); &#125; &#125; &#125; return singletonInstance; &#125;&#125;基于类初始化的单例模式JVM在类的初始化阶段，会执行类的初始化。在执行类的初始化期间，JVM会去获取一个锁。这个锁可以同步多个线程对同一个类的初始化。因此，基于这个特性，可以实现另一种线程安全的单例模式。1234567891011121314151617public class StaticClassSingleton &#123; // 静态内部类 private static class InstanceHolder&#123; public static StaticClassSingleton staticClassSingleton = new StaticClassSingleton(); &#125; // 构造方法私有化，禁止外部创建单例类 private StaticClassSingleton()&#123; &#125; // 首次执行该方法时将初始化InstanceHolder类,初始化这个类的过程JVM负责保证最终 // 只有一个线程可以成功完成初始化，从而确保返回的对象是单例的 public static StaticClassSingleton getSingletonInstance()&#123; return InstanceHolder.staticClassSingleton; &#125;&#125;总结经过对每一种单例模式的分析与实现，最终我们发现，只有最后两种单例模式符合开发的要求，因此，我们在自己的应用程序中实现单例模式时应采用后面两种。由于最后一种方式只能返回静态的单例对象，所以当我们需要非静态的单例对象时只能采用volatile+双重检查加锁的方式来实现。]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>手撕代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手撕LRUCache]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%89%8B%E6%92%95LRUCache%2F</url>
    <content type="text"><![CDATA[LRUCache中文名称最近最少使用缓存，该类型缓存用途广泛，主要用于保存近期经常使用的数据。LRUCache的实现方式多种多样，但效率最高的只有一种，那就是LinkedList与HashMap配合实现LRUCache。LRUCache实现原理分析众所周知，LRUCache的一个最大特点就是缓存里的数据永远都是最近访问过的数据。这样设计是因为计算机内部的数据访问具有空间局部性。如果把最近访问过得数据放到缓存，那么缓存命中的几率会很大，这也大大提升了程序的运行效率。那么，底层该采用那种数据结构才能实现LRUCache缓存呢？缓存的基本功能是数据访问，我们为了提高数据访问效率一般都采用HashMap结构保存数据。同时，为了保存数据的访问状态信息，我们采用链表来保证数据永远是最近访问过的(每次访问数据后将其移动至链表头结点)。这里为了操作方便，采用带首尾节点的双链表实现数据状态保存。当然，Cache是很宝贵的资源，因为它们的存储空间一般都不大。所以还得设置变量标识缓存总容量大小以及当前数据大小。当缓存满时，淘汰最近最少访问的数据，即链表尾部的数据(因为我们每次添加或访问数据后，该数据都会被放至表头)。LRUCache代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import java.util.HashMap;import java.util.Map;public class LRUCache &#123; private Map&lt;Integer,DLinkedNode&gt; map; private DLinkedNode head; private DLinkedNode tail; private int capacity; private int count; public LRUCache(int capacity)&#123; map = new HashMap&lt;&gt;(); head = new DLinkedNode(); head.prev = null; tail = new DLinkedNode(); tail.next = null; tail.prev = head; head.next = tail; this.capacity = capacity; count = 0; &#125; public int get(int key)&#123; DLinkedNode node = map.get(key); if(node!=null)&#123; moveToHead(node); return node.value; &#125; return -1; &#125; public void put(int key, int value)&#123; DLinkedNode node = map.get(key); if(node==null)&#123; DLinkedNode newNode = new DLinkedNode(); newNode.key = key; newNode.value = value; map.put(key,newNode); addToHead(newNode); count++; if(count&gt;capacity)&#123; removeTail(); count--; &#125; &#125;else&#123; node.value = value; moveToHead(node); &#125; &#125; private void removeTail()&#123; remove(tail.prev); &#125; private void remove(DLinkedNode node)&#123; node.prev.next = node.next; node.next.prev = node.prev; node.prev = null; node.next = null; &#125; private void addToHead(DLinkedNode node)&#123; node.next = head.next; node.prev = head; head.next = node; node.next.prev = node; &#125; private void moveToHead(DLinkedNode node)&#123; remove(node); addToHead(node); &#125; class DLinkedNode&#123; int key; int value; DLinkedNode prev; DLinkedNode next; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>手撕代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown语法速记]]></title>
    <url>%2F%E6%95%88%E7%8E%87%2FMarkDown%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。下面就是MarkDown的常用标记语法的介绍，作为很受欢迎的写作工具，极大的提升我们日常的写作效率。语法虽然都比较简单，但短时间内都记住也是件比较困难的事情，这篇博客可以当做MarkDown语法工具书，写作过程中根据需求随时查阅，用的多了，自然就熟记于心了。Headers1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1Alt-H2Emphasis1234567Emphasis, aka italics, with *asterisks* or _underscores_.Strong emphasis, aka bold, with **asterisks** or __underscores__.Combined emphasis with **asterisks and _underscores_**.Strikethrough uses two tildes. ~~Scratch this.~~Emphasis, aka italics, with asterisks or underscores.Strong emphasis, aka bold, with asterisks or underscores.Combined emphasis with asterisks and underscores.Strikethrough uses two tildes. Scratch this.Lists1234567891011121. First ordered list item2. Another item * Unordered sub-list. 1. Actual numbers don&apos;t matter, just that it&apos;s a number 1. Ordered sub-list4. And another item. Some text that should be aligned with the above item.* Unordered list can use asterisks- Or minuses+ Or plusesFirst ordered list itemAnother itemUnordered sub-list.Actual numbers don’t matter, just that it’s a numberOrdered sub-listAnd another item.Some text that should be aligned with the above item.Unordered list can use asterisksOr minusesOr plusesLinksThere are two ways to create links.1234567891011121314151617[I&apos;m an inline-style link](https://www.google.com)[I&apos;m a reference-style link][Arbitrary case-insensitive reference text][You can use numbers for reference-style link definitions][1]Or leave it empty and use the [link text itself].URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or &lt;http://www.example.com&gt; and sometimes example.com (but not on Github, for example).Some text to show that the reference links can follow later.[arbitrary case-insensitive reference text]: https://www.mozilla.org[1]: http://slashdot.org[link text itself]: http://www.reddit.comI’m an inline-style linkI’m a reference-style linkYou can use numbers for reference-style link definitionsOr leave it empty and use the link text itself.URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).Some text to show that the reference links can follow later.Images123456789Here&apos;s our logo (hover to see the title text):Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)Reference-style: ![alt text][logo][logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot;Here’s our logo (hover to see the title text):Inline-style:Reference-style:Code and Syntax HighlightingCode blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.1Inline `code` has `back-ticks around` it.Inline code has back-ticks around it.Blocks of code are either fenced by lines with three back-ticks ```(采用’\‘转义), or are indented with four spaces. I recommend only using the fenced code blocks – they’re easier and only they support syntax highlighting.1234567891011121314​```(前面用````包围可显示)javascriptvar s = &quot;JavaScript syntax highlighting&quot;;alert(s);``````pythons = &quot;Python syntax highlighting&quot;print s``````No language indicated, so no syntax highlighting. But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.```​12var s = &quot;JavaScript syntax highlighting&quot;;alert(s);12s = "Python syntax highlighting"print s12No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.TablesTables aren’t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.1234567891011121314151617Colons can be used to align columns.| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |There must be at least 3 dashes separating each header cell.The outer pipes (|) are optional, and you don&apos;t need to make the raw Markdown line up prettily. You can also use inline Markdown.Markdown | Less | Pretty--- | --- | ---*Still* | `renders` | **nicely**1 | 2 | 3Colons can be used to align columns.TablesAreCoolcol 3 isright-aligned$1600col 2 iscentered$12zebra stripesare neat$1There must be at least 3 dashes separating each header cell.The outer pipes (|) are optional, and you don’t need to make theraw Markdown line up prettily. You can also use inline Markdown.MarkdownLessPrettyStillrendersnicely123Colons can be used to align columns.Blockquotes123456&gt; Blockquotes are very handy in email to emulate reply text.&gt; This line is part of the same quote.Quote break.&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&apos;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.Blockquotes are very handy in email to emulate reply text.This line is part of the same quote.Quote break.This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.Inline HTMLYou can also use raw HTML in your Markdown, and it’ll mostly work pretty well.1234567&lt;dl&gt; &lt;dt&gt;Definition list&lt;/dt&gt; &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt; &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;&lt;/dl&gt;Definition listIs something people use sometimes.Markdown in HTMLDoes not work very well. Use HTML tags.Horizontal Rule12345678910111213Three or more...---Hyphens***Asterisks___UnderscoresThree or more…HyphensAsterisksUnderscoresLine BreaksMy basic recommendation for learning how line breaks work is to experiment and discover – hitonce (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.Here are some things to try out:123456Here&apos;s a line for us to start with.This line is separated from the one above by two newlines, so it will be a *separate paragraph*.This line is also a separate paragraph, but...This line is only separated by a single newline, so it&apos;s a separate line in the *same paragraph*.Here’s a line for us to start with.This line is separated from the one above by two newlines, so it will be a separate paragraph.This line is also begins a separate paragraph, but…This line is only separated by a single newline, so it’s a separate line in the same paragraph.(Technical note: Markdown Here uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.)参考[1]: https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>效率提升</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手撕一个生产者消费者模型]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%89%8B%E6%92%95%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[前言生产者-消费者模型是在计算机各个领域经常用到的一个模型，那么如何简单实现这个模型呢?问题分析首先，需要一个地方存放生产者生产与消费者消费的资源，简单起见我们用一个Object数组当做资源池来保存资源。其次，我们知道资源池是有大小限制的，那么生产者向资源池添加资源时就必须考虑资源池是否填满。同理，消费者消费资源时也必须考虑资源池里有没有资源可供消费，即资源池是否为空。那么我们如何知道资源池是满还是空呢？当然是给资源池添加两个属性来表示资源池的状态：notFull表示非满状态，notEmpty表示非空状态。最后，资源池是一个临界资源，不能同时被生产者消费者访问(存在多个生产者和消费者。若同时访问会造成资源数据错误)。我们需要一把锁来控制资源池的访问。这里采用ReentryLock来进行访问控制。综上，采用带两个条件的ReentryLock来实现生产者消费者模型最合适不过了。下面就是实现代码。生产者-消费者模型代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class ProducerAndConsumerModel&lt;T&gt; &#123; private Object[] resources; // 添加下标，删除下标，数量 private int addIndex, removeIndex, count; private Lock lock = new ReentryLock(); private Condition notFull = lock.newCondition(); private Condition notEmpty = lock.newCondition(); public ProducerAndConsumerModel(int size)&#123; resources = new Object[size]; &#125; //生产者生产资源，若资源池已满，则生产者进入等待状态，直到有空位 public void addResource(T resource) throws InterruptedException&#123; lock.lock(); try&#123; while(count==Object.length)&#123; notFull.await(); &#125; resources[addIndex] = resource; if(++addIndex==Object.length)&#123; addIndex = 0; &#125; ++count; notEmpty.signal(); &#125;finally&#123; lock.unlock(); &#125; &#125; //消费者消费资源，若资源池为空，则消费者进入等待状态，直到资源池有资源 public T removeResource()&#123; lock.lock(); try&#123; while(count==0)&#123; notEmpty.await(); &#125; Object resource = resources[removeIndex]; if(++removeIndex==resources.length)&#123; removeIndex==0; &#125; --count; notFull.signal(); return (T) resource; &#125;finally&#123; lock.unlock(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>手撕代码</tag>
      </tags>
  </entry>
</search>

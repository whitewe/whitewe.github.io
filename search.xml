<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[手撕LRUCache]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%89%8B%E6%92%95LRUCache%2F</url>
    <content type="text"><![CDATA[LRUCache中文名称最近最少使用缓存，该类型缓存用途广泛，主要用于保存近期经常使用的数据。LRUCache的实现方式多种多样，但效率最高的只有一种，那就是LinkedList与HashMap配合实现LRUCache。LRUCache实现原理分析众所周知，LRUCache的一个最大特点就是缓存里的数据永远都是最近访问过的数据。这样设计是因为计算机内部的数据访问具有空间局部性。如果把最近访问过得数据放到缓存，那么缓存命中的几率会很大，这也大大提升了程序的运行效率。那么，底层该采用那种数据结构才能实现LRUCache缓存呢？缓存的基本功能是数据访问，我们为了提高数据访问效率一般都采用HashMap结构保存数据。同时，为了保存数据的访问状态信息，我们采用链表来保证数据永远是最近访问过的(每次访问数据后将其移动至链表头结点)。这里为了操作方便，采用带首尾节点的双链表实现数据状态保存。当然，Cache是很宝贵的资源，因为它们的存储空间一般都不大。所以还得设置变量标识缓存总容量大小以及当前数据大小。当缓存满时，淘汰最近最少访问的数据，即链表尾部的数据(因为我们每次添加或访问数据后，该数据都会被放至表头)。LRUCache代码实现123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081import java.util.HashMap;import java.util.Map;public class LRUCache &#123; private Map&lt;Integer,DLinkedNode&gt; map; private DLinkedNode head; private DLinkedNode tail; private int capacity; private int count; public LRUCache(int capacity)&#123; map = new HashMap&lt;&gt;(); head = new DLinkedNode(); head.prev = null; tail = new DLinkedNode(); tail.next = null; tail.prev = head; head.next = tail; this.capacity = capacity; count = 0; &#125; public int get(int key)&#123; DLinkedNode node = map.get(key); if(node!=null)&#123; moveToHead(node); return node.value; &#125; return -1; &#125; public void put(int key, int value)&#123; DLinkedNode node = map.get(key); if(node==null)&#123; DLinkedNode newNode = new DLinkedNode(); newNode.key = key; newNode.value = value; map.put(key,newNode); addToHead(newNode); count++; if(count&gt;capacity)&#123; removeTail(); count--; &#125; &#125;else&#123; node.value = value; moveToHead(node); &#125; &#125; private void removeTail()&#123; remove(tail.prev); &#125; private void remove(DLinkedNode node)&#123; node.prev.next = node.next; node.next.prev = node.prev; node.prev = null; node.next = null; &#125; private void addToHead(DLinkedNode node)&#123; node.next = head.next; node.prev = head; head.next = node; node.next.prev = node; &#125; private void moveToHead(DLinkedNode node)&#123; remove(node); addToHead(node); &#125; class DLinkedNode&#123; int key; int value; DLinkedNode prev; DLinkedNode next; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>手撕代码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MarkDown语法速记]]></title>
    <url>%2F%E6%95%88%E7%8E%87%2FMarkDown%E8%AF%AD%E6%B3%95%E9%80%9F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。下面就是MarkDown的常用标记语法的介绍，作为很受欢迎的写作工具，极大的提升我们日常的写作效率。语法虽然都比较简单，但短时间内都记住也是件比较困难的事情，这篇博客可以当做MarkDown语法工具书，写作过程中根据需求随时查阅，用的多了，自然就熟记于心了。Headers1234567891011121314# H1## H2### H3#### H4##### H5###### H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1======Alt-H2------H1H2H3H4H5H6Alternatively, for H1 and H2, an underline-ish style:Alt-H1Alt-H2Emphasis1234567Emphasis, aka italics, with *asterisks* or _underscores_.Strong emphasis, aka bold, with **asterisks** or __underscores__.Combined emphasis with **asterisks and _underscores_**.Strikethrough uses two tildes. ~~Scratch this.~~Emphasis, aka italics, with asterisks or underscores.Strong emphasis, aka bold, with asterisks or underscores.Combined emphasis with asterisks and underscores.Strikethrough uses two tildes. Scratch this.Lists1234567891011121. First ordered list item2. Another item * Unordered sub-list. 1. Actual numbers don&apos;t matter, just that it&apos;s a number 1. Ordered sub-list4. And another item. Some text that should be aligned with the above item.* Unordered list can use asterisks- Or minuses+ Or plusesFirst ordered list itemAnother itemUnordered sub-list.Actual numbers don’t matter, just that it’s a numberOrdered sub-listAnd another item.Some text that should be aligned with the above item.Unordered list can use asterisksOr minusesOr plusesLinksThere are two ways to create links.1234567891011121314151617[I&apos;m an inline-style link](https://www.google.com)[I&apos;m a reference-style link][Arbitrary case-insensitive reference text][You can use numbers for reference-style link definitions][1]Or leave it empty and use the [link text itself].URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or &lt;http://www.example.com&gt; and sometimes example.com (but not on Github, for example).Some text to show that the reference links can follow later.[arbitrary case-insensitive reference text]: https://www.mozilla.org[1]: http://slashdot.org[link text itself]: http://www.reddit.comI’m an inline-style linkI’m a reference-style linkYou can use numbers for reference-style link definitionsOr leave it empty and use the link text itself.URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).Some text to show that the reference links can follow later.Images123456789Here&apos;s our logo (hover to see the title text):Inline-style: ![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)Reference-style: ![alt text][logo][logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot;Here’s our logo (hover to see the title text):Inline-style:Reference-style:Code and Syntax HighlightingCode blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and Markdown Here – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. Markdown Here supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the highlight.js demo page.1Inline `code` has `back-ticks around` it.Inline code has back-ticks around it.Blocks of code are either fenced by lines with three back-ticks ```(采用’\‘转义), or are indented with four spaces. I recommend only using the fenced code blocks – they’re easier and only they support syntax highlighting.1234567891011121314​```(前面用````包围可显示)javascriptvar s = &quot;JavaScript syntax highlighting&quot;;alert(s);``````pythons = &quot;Python syntax highlighting&quot;print s``````No language indicated, so no syntax highlighting. But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.```​12var s = &quot;JavaScript syntax highlighting&quot;;alert(s);12s = "Python syntax highlighting"print s12No language indicated, so no syntax highlighting in Markdown Here (varies on Github). But let&apos;s throw in a &lt;b&gt;tag&lt;/b&gt;.TablesTables aren’t part of the core Markdown spec, but they are part of GFM and Markdown Here supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.1234567891011121314151617Colons can be used to align columns.| Tables | Are | Cool || ------------- |:-------------:| -----:|| col 3 is | right-aligned | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 |There must be at least 3 dashes separating each header cell.The outer pipes (|) are optional, and you don&apos;t need to make the raw Markdown line up prettily. You can also use inline Markdown.Markdown | Less | Pretty--- | --- | ---*Still* | `renders` | **nicely**1 | 2 | 3Colons can be used to align columns.TablesAreCoolcol 3 isright-aligned$1600col 2 iscentered$12zebra stripesare neat$1There must be at least 3 dashes separating each header cell.The outer pipes (|) are optional, and you don’t need to make theraw Markdown line up prettily. You can also use inline Markdown.MarkdownLessPrettyStillrendersnicely123Colons can be used to align columns.Blockquotes123456&gt; Blockquotes are very handy in email to emulate reply text.&gt; This line is part of the same quote.Quote break.&gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let&apos;s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.Blockquotes are very handy in email to emulate reply text.This line is part of the same quote.Quote break.This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can put Markdown into a blockquote.Inline HTMLYou can also use raw HTML in your Markdown, and it’ll mostly work pretty well.1234567&lt;dl&gt; &lt;dt&gt;Definition list&lt;/dt&gt; &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt; &lt;dt&gt;Markdown in HTML&lt;/dt&gt; &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;&lt;/dl&gt;Definition listIs something people use sometimes.Markdown in HTMLDoes not work very well. Use HTML tags.Horizontal Rule12345678910111213Three or more...---Hyphens***Asterisks___UnderscoresThree or more…HyphensAsterisksUnderscoresLine BreaksMy basic recommendation for learning how line breaks work is to experiment and discover – hitonce (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.Here are some things to try out:123456Here&apos;s a line for us to start with.This line is separated from the one above by two newlines, so it will be a *separate paragraph*.This line is also a separate paragraph, but...This line is only separated by a single newline, so it&apos;s a separate line in the *same paragraph*.Here’s a line for us to start with.This line is separated from the one above by two newlines, so it will be a separate paragraph.This line is also begins a separate paragraph, but…This line is only separated by a single newline, so it’s a separate line in the same paragraph.(Technical note: Markdown Here uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.)参考[1]: https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet]]></content>
      <categories>
        <category>效率</category>
      </categories>
      <tags>
        <tag>效率提升</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手撕一个生产者消费者模型]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%2F%E6%89%8B%E6%92%95%E7%94%9F%E4%BA%A7%E8%80%85%E6%B6%88%E8%B4%B9%E8%80%85%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[前言生产者-消费者模型是在计算机各个领域经常用到的一个模型，那么如何简单实现这个模型呢?问题分析首先，需要一个地方存放生产者生产与消费者消费的资源，简单起见我们用一个Object数组当做资源池来保存资源。其次，我们知道资源池是有大小限制的，那么生产者向资源池添加资源时就必须考虑资源池是否填满。同理，消费者消费资源时也必须考虑资源池里有没有资源可供消费，即资源池是否为空。那么我们如何知道资源池是满还是空呢？当然是给资源池添加两个属性来表示资源池的状态：notFull表示非满状态，notEmpty表示非空状态。最后，资源池是一个临界资源，不能同时被生产者消费者访问(存在多个生产者和消费者。若同时访问会造成资源数据错误)。我们需要一把锁来控制资源池的访问。这里采用ReentryLock来进行访问控制。综上，采用带两个条件的ReentryLock来实现生产者消费者模型最合适不过了。下面就是实现代码。生产者-消费者模型代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849public class ProducerAndConsumerModel&lt;T&gt; &#123; private Object[] resources; // 添加下标，删除下标，数量 private int addIndex, removeIndex, count; private Lock lock = new ReentryLock(); private Condition notFull = lock.newCondition(); private Condition notEmpty = lock.newCondition(); public ProducerAndConsumerModel(int size)&#123; resources = new Object[size]; &#125; //生产者生产资源，若资源池已满，则生产者进入等待状态，直到有空位 public void addResource(T resource) throws InterruptedException&#123; lock.lock(); try&#123; while(count==Object.length)&#123; notFull.await(); &#125; resources[addIndex] = resource; if(++addIndex==Object.length)&#123; addIndex = 0; &#125; ++count; notEmpty.signal(); &#125;finally&#123; lock.unlock(); &#125; &#125; //消费者消费资源，若资源池为空，则消费者进入等待状态，直到资源池有资源 public T removeResource()&#123; lock.lock(); try&#123; while(count==0)&#123; notEmpty.await(); &#125; Object resource = resources[removeIndex]; if(++removeIndex==resources.length)&#123; removeIndex==0; &#125; --count; notFull.signal(); return (T) resource; &#125;finally&#123; lock.unlock(); &#125; &#125;&#125;]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>手撕代码</tag>
      </tags>
  </entry>
</search>
